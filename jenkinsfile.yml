pipeline{
    agent any
     environment {
        DOCKER_REGISTRY = 'bcccontainerreistry.azurecr.io'
        DOCKER_REPO = 'Taskmasterpro'
        DOCKER_IMAGE_TAG = "${DOCKER_REGISTRY}/${DOCKER_REPO}:${BUILD_NUMBER}"
        ACR_URL = 'bcccontainerreistry.azurecr.io'
        ACR_CREDENTIALS_ID = 'Acr-ID'
     }
    stages {
        stage('Git Checkout'){
            steps{
                git branch: 'main', credentialsId: 'gitcred', url: 'https://github.com/balucc/Task-Master-Pro.git'
            }
        }
        stage('Compile'){
            steps{
                withMaven(maven:'maven'){
                    sh 'mvn clean install'
                }                    
            }
        }
        stage('Docker build'){
            sh 'docker build -t ${DOCKER_IMAGE_TAG}.'

        }
        stage('Test Docker Image') {
            steps {
                script {
                    // Run tests against the Docker image
                    try {
                        sh """
                        docker run --rm --name test-container ${DOCKER_IMAGE_TAG} sh -c "
                            # Add your test commands here. Example:
                            echo 'Running application tests...';
                            curl -f http://localhost:8080/health || exit 1;
                        "
                        """
                    } finally {
                        // Clean up the container if something fails
                        sh "docker rm -f test-container || true"
                    }
                }
            }
        }
        stage('Push Docker Image') {
            when {
                expression {
                    currentBuild.result == null // Proceed only if all previous stages succeeded
                }
            }
            steps {
                script {
                    withDockerRegistry(credentialsId: "${ACR_CREDENTIALS_ID}", url: "https://${ACR_URL}") {

                    // Push the Docker image to the registry
                    sh "docker push ${DOCKER_IMAGE_TAG}"
                    }
                }
            }
        }
        post {
            always {
            // Clean up dangling Docker images
                sh "docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true"
            }
    }
}
}
