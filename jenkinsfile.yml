pipeline {
    agent any
    environment {
        DOCKER_REGISTRY = 'bcccontainerreistry.azurecr.io'
        DOCKER_REPO = 'taskmasterpro'
        DOCKER_IMAGE_TAG = "${DOCKER_REGISTRY}/${DOCKER_REPO}:${BUILD_NUMBER}"
        ACR_URL = 'bcccontainerreistry.azurecr.io'
        ACR_CREDENTIALS_ID = 'Acr-ID'
    }
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'gitcred', url: 'https://github.com/balucc/Task-Master-Pro.git'
            }
        }
        stage('Compile') {
            steps {
                withMaven(maven: 'maven') {
                    sh 'mvn clean install'
                }
            }
        }
        stage('Docker Build') {
            steps {
                sh 'docker build -t ${DOCKER_IMAGE_TAG} .'
            }
        }
        stage('Run Container and Check Status') {
            steps {
                script {
                    try {
                        // Run the container in detached mode
                        sh '''
                        docker run -d --name test-container ${DOCKER_IMAGE_TAG}
                        '''
                        
                        // Wait for the container to initialize
                        sh 'sleep 10' // Adjust the delay as needed for your application

                        // Check container status
                        sh '''
                        CONTAINER_STATUS=$(docker inspect -f "{{.State.Status}}" test-container)
                        if [ "$CONTAINER_STATUS" != "running" ]; then
                            echo "Container is not running: $CONTAINER_STATUS"
                            exit 1
                        fi
                        echo "Container is running successfully."
                        '''
                    } finally {
                        // Stop and remove the test container
                        sh 'docker rm -f test-container || true'
                    }
                }
            }
        }
        stage('Push Docker Image') {
            when {
                expression {
                    currentBuild.result == null // Proceed only if all previous stages succeeded
                }
            }
            steps {
                script {
                    withDockerRegistry(credentialsId: "${ACR_CREDENTIALS_ID}", url: "https://${ACR_URL}") {
                        // Push the Docker image to the registry
                        sh "docker push ${DOCKER_IMAGE_TAG}"
                    }
                }
            }
        }
        stage('Edit Deployment File') {
            steps {
                script {
                    sh "sed -i 's|image: bcccontainerreistry.azurecr.io/taskmasterpro:.*|image: bcccontainerreistry.azurecr.io/taskmasterpro:${BUILD_NUMBER}|' deployment-service.yml"
                }
            }
        }
        stage('Deploy to AKS'){
            steps{
                sh 'kubectl apply -f deployment-service.yml'
                sh 'kubectl apply -f ingress.yml'
            }
        }
    }
    post {
        always {
            // Clean up dangling Docker images
            sh "docker rmi ${DOCKER_IMAGE_TAG} || true"
        }
    }
}
